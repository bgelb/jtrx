options:
  parameters:
    author: Ben Gelb
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: Capture two streams of samples from sdrDUO
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: two_rx_capture
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Two RX Capture Graph
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [0, 4.0]
    rotation: 0
    state: enabled

blocks:
- name: bw
  id: variable
  parameters:
    comment: ''
    value: 3e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 12.0]
    rotation: 0
    state: true
- name: decim
  id: variable
  parameters:
    comment: ''
    value: '125'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 12.0]
    rotation: 0
    state: true
- name: f_if
  id: variable
  parameters:
    comment: ''
    value: 10e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [360, 12.0]
    rotation: 0
    state: true
- name: fc
  id: variable
  parameters:
    comment: ''
    value: 474.2e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 12.0]
    rotation: 0
    state: true
- name: fc_2200
  id: variable
  parameters:
    comment: ''
    value: 136e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 76.0]
    rotation: 0
    state: true
- name: interp
  id: variable
  parameters:
    comment: ''
    value: '24'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 76.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 2e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1136, 688.0]
    rotation: 0
    state: true
- name: blocks_complex_to_real_0
  id: blocks_complex_to_real
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1472, 672.0]
    rotation: 0
    state: true
- name: blocks_complex_to_real_0_0
  id: blocks_complex_to_real
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1184, 440.0]
    rotation: 0
    state: true
- name: blocks_complex_to_real_0_0_0
  id: blocks_complex_to_real
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 24.0]
    rotation: 0
    state: true
- name: blocks_complex_to_real_0_1
  id: blocks_complex_to_real
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1456, 1456.0]
    rotation: 0
    state: true
- name: blocks_float_to_short_0
  id: blocks_float_to_short
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '32768'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1192, 588.0]
    rotation: 0
    state: true
- name: blocks_float_to_short_0_0
  id: blocks_float_to_short
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '32768'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1304, 156.0]
    rotation: 0
    state: true
- name: blocks_float_to_short_0_1
  id: blocks_float_to_short
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '32768'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1488, 836.0]
    rotation: 0
    state: true
- name: blocks_float_to_short_0_1_0
  id: blocks_float_to_short
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '32768'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1472, 1620.0]
    rotation: 0
    state: true
- name: blocks_freqshift_cc_0
  id: blocks_freqshift_cc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    freq: bw/2
    maxoutbuf: '0'
    minoutbuf: '0'
    sample_rate: 12e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 84.0]
    rotation: 0
    state: true
- name: blocks_freqshift_cc_0_0
  id: blocks_freqshift_cc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    freq: bw/2
    maxoutbuf: '0'
    minoutbuf: '0'
    sample_rate: 12e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 332.0]
    rotation: 0
    state: true
- name: blocks_freqshift_cc_0_0_0
  id: blocks_freqshift_cc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    freq: bw/2
    maxoutbuf: '0'
    minoutbuf: '0'
    sample_rate: 12e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1500.0]
    rotation: 0
    state: true
- name: blocks_freqshift_cc_0_0_0_0
  id: blocks_freqshift_cc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    freq: bw/2
    maxoutbuf: '0'
    minoutbuf: '0'
    sample_rate: 12e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 1148.0]
    rotation: 0
    state: true
- name: blocks_multiply_const_xx_0
  id: blocks_multiply_const_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '64'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1480, 756.0]
    rotation: 0
    state: true
- name: blocks_multiply_const_xx_0_0
  id: blocks_multiply_const_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '64'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1464, 1540.0]
    rotation: 0
    state: true
- name: blocks_multiply_const_xx_1
  id: blocks_multiply_const_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '64'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1168, 508.0]
    rotation: 0
    state: true
- name: blocks_multiply_const_xx_1_0
  id: blocks_multiply_const_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '64'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1304, 92.0]
    rotation: 0
    state: true
- name: blocks_multiply_const_xx_1_1
  id: blocks_multiply_const_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: 10**(gain/10)
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 628.0]
    rotation: 0
    state: true
- name: blocks_multiply_const_xx_2
  id: blocks_multiply_const_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: 10**(-gain/10)
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 756.0]
    rotation: 0
    state: true
- name: blocks_phase_shift_0
  id: blocks_phase_shift
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    is_radians: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    shift: phi
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 752.0]
    rotation: 0
    state: true
- name: blocks_stream_mux_0
  id: blocks_stream_mux
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    lengths: (1, 1)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1272, 240.0]
    rotation: 0
    state: true
- name: blocks_stream_mux_0_0
  id: blocks_stream_mux
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    lengths: (1, 1)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 1304.0]
    rotation: 0
    state: true
- name: blocks_tag_debug_0
  id: blocks_tag_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    display: 'False'
    filter: '""'
    name: ''
    num_inputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1504, 132.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      import time\nimport pmt\nfrom gnuradio import gr\n\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ period=120):  # only default arguments here\n        \"\"\"arguments to this\
      \ function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Add Timestamp Tag',   # will show up in\
      \ GRC\n            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.period=period\n\
      \        self.last_time=None\n\n    def write_rxtime_tag(self, tv):\n      \
      \  sec = int(tv)\n        frac = tv % 1\n        key = pmt.intern('rx_time')\n\
      \        value = pmt.make_tuple(pmt.from_uint64(sec), pmt.from_double(frac))\n\
      \        self.add_item_tag(0, self.nitems_written(0), key, value) \n\n    def\
      \ work(self, input_items, output_items):\n        now = time.time()\n      \
      \  if self.last_time and (now // self.period != self.last_time // self.period):\n\
      \            self.write_rxtime_tag(now)\n        self.last_time = now\n\n  \
      \      output_items[0][:] = input_items[0][:]\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    period: '1'
  states:
    _io_cache: ('Add Timestamp Tag', 'blk', [('period', '120')], [('0', 'complex',
      1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple multiply
      const', ['period'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 164.0]
    rotation: 0
    state: true
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      import pmt\nimport time\nfrom datetime import datetime\nfrom gnuradio import\
      \ gr\n\nclass blk(gr.sync_block):  # other base classes are basic_block, decim_block,\
      \ interp_block\n    \"\"\"Embedded Python Block example - a simple multiply\
      \ const\"\"\"\n\n    def __init__(self, period_sec=120, debug=False):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='Rotating File Sink',   # will show up in GRC\n          \
      \  in_sig=[np.complex64],\n            out_sig=None\n        )\n        # if\
      \ an attribute with the same name as a parameter is found,\n        # a callback\
      \ is registered (properties work, too).\n        self.period_sec = period_sec\n\
      \        self.outfile = None\n        self.debug = debug\n        self.last_rx_time\
      \ = None\n\n    def __exit__(self, *args):\n        if self.outfile:\n     \
      \       print('{}: Closing current output file (shutdown).'.format(datetime,now))\n\
      \            self.outfile.close()\n\n    def is_period_start(self, last_ts,\
      \ cur_ts):\n        if last_ts:\n            last_period = last_ts[0] // self.period_sec\n\
      \            cur_period = cur_ts[0] // self.period_sec\n            assert cur_period\
      \ >= last_period\n            if cur_period > last_period:\n               \
      \ return True\n        return False\n\n    def update_last_rx_time(self, cur_ts):\n\
      \        if cur_ts:\n            self.last_rx_time = cur_ts\n\n    def work(self,\
      \ input_items, output_items):\n\n        time_pos_list = [(None, self.last_rx_time)]\n\
      \n        # find all rx_time tags in input\n        tags = self.get_tags_in_window(0,\
      \ 0, len(input_items[0]))\n        for tag in tags:\n            key = pmt.to_python(tag.key)\n\
      \            value = pmt.to_python(tag.value)\n            offset = tag.offset\n\
      \            pos = offset - self.nitems_read(0)\n            assert pos < (self.nitems_read(0)\
      \ + len(input_items[0]))\n            if key == 'rx_time':\n               \
      \ if self.debug:\n                    print ('{} => {}'.format(pos, value))\n\
      \                time_pos_list.append((pos, value))\n\n        # find all period\
      \ start boundaries\n        start_pos = None\n        for i in range(1, len(time_pos_list)):\n\
      \            if self.is_period_start(time_pos_list[i-1][1], time_pos_list[i][1]):\n\
      \                # check there aren't multiple starts\n                assert\
      \ start_pos == None\n                start_pos = time_pos_list[i]\n\n      \
      \  self.update_last_rx_time(time_pos_list[-1][1])\n\n        if start_pos:\n\
      \            period_name = datetime.fromtimestamp(start_pos[1][0]).strftime(\"\
      %y%m%d_%H%M\")\n            cur_file_items = input_items[0][:start_pos[0]]\n\
      \            new_file_items = input_items[0][start_pos[0]:]\n\n            #\
      \ write out items for current file\n            if self.outfile:\n         \
      \       self.outfile.write(cur_file_items.tobytes())\n                print('{}:\
      \ Closing current output file.'.format(datetime.now()))\n                self.outfile.close()\n\
      \n            # write out items for new file\n            filename = period_name\
      \ + '.dat'\n            print ('{}: New period start at sample {} (ts={:.8f}),\
      \ opening new output file {}.'.format(datetime.now(), start_pos[0]+self.nitems_read(0),\
      \ start_pos[1][0]+start_pos[1][1], filename))\n            self.outfile = open(filename,\
      \ 'wb')\n            self.outfile.write(new_file_items.tobytes())\n\n      \
      \  elif self.outfile:\n            self.outfile.write(input_items[0].tobytes())\n\
      \n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    debug: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    period_sec: '60'
  states:
    _io_cache: ('Rotating File Sink', 'blk', [('period_sec', '120'), ('debug', 'False')],
      [('0', 'complex', 1)], [], 'Embedded Python Block example - a simple multiply
      const', ['debug', 'period_sec'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1536, 492.0]
    rotation: 0
    state: true
- name: epy_block_1_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      import pmt\nimport time\nfrom datetime import datetime\nfrom gnuradio import\
      \ gr\n\nclass blk(gr.sync_block):  # other base classes are basic_block, decim_block,\
      \ interp_block\n    \"\"\"Embedded Python Block example - a simple multiply\
      \ const\"\"\"\n\n    def __init__(self, period_sec=120, debug=False, name_prefix=None):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Rotating File Sink',   # will show up in GRC\n\
      \            in_sig=[np.complex64],\n            out_sig=None\n        )\n \
      \       # if an attribute with the same name as a parameter is found,\n    \
      \    # a callback is registered (properties work, too).\n        self.period_sec\
      \ = period_sec\n        self.outfile = None\n        self.debug = debug\n  \
      \      self.last_rx_time = None\n        self.name_prefix = name_prefix\n\n\
      \    def __exit__(self, *args):\n        if self.outfile:\n            print('{}:\
      \ Closing current output file (shutdown).'.format(datetime,now))\n         \
      \   self.outfile.close()\n\n    def is_period_start(self, last_ts, cur_ts):\n\
      \        if last_ts:\n            last_period = last_ts[0] // self.period_sec\n\
      \            cur_period = cur_ts[0] // self.period_sec\n            assert cur_period\
      \ >= last_period\n            if cur_period > last_period:\n               \
      \ return True\n        return False\n\n    def update_last_rx_time(self, cur_ts):\n\
      \        if cur_ts:\n            self.last_rx_time = cur_ts\n\n    def work(self,\
      \ input_items, output_items):\n\n        time_pos_list = [(None, self.last_rx_time)]\n\
      \n        # find all rx_time tags in input\n        tags = self.get_tags_in_window(0,\
      \ 0, len(input_items[0]))\n        for tag in tags:\n            key = pmt.to_python(tag.key)\n\
      \            value = pmt.to_python(tag.value)\n            offset = tag.offset\n\
      \            pos = offset - self.nitems_read(0)\n            assert pos < (self.nitems_read(0)\
      \ + len(input_items[0]))\n            if key == 'rx_time':\n               \
      \ if self.debug:\n                    print ('{} => {}'.format(pos, value))\n\
      \                time_pos_list.append((pos, value))\n\n        # find all period\
      \ start boundaries\n        start_pos = None\n        for i in range(1, len(time_pos_list)):\n\
      \            if self.is_period_start(time_pos_list[i-1][1], time_pos_list[i][1]):\n\
      \                # check there aren't multiple starts\n                assert\
      \ start_pos == None\n                start_pos = time_pos_list[i]\n\n      \
      \  self.update_last_rx_time(time_pos_list[-1][1])\n\n        if start_pos:\n\
      \            period_name = datetime.fromtimestamp(start_pos[1][0]).strftime(\"\
      %y%m%d_%H%M\")\n            cur_file_items = input_items[0][:start_pos[0]]\n\
      \            new_file_items = input_items[0][start_pos[0]:]\n\n            #\
      \ write out items for current file\n            if self.outfile:\n         \
      \       self.outfile.write(cur_file_items.tobytes())\n                print('{}:\
      \ Closing current output file.'.format(datetime.now()))\n                self.outfile.close()\n\
      \n            # write out items for new file\n            if self.name_prefix\
      \ is not None:\n              filename = self.name_prefix + period_name + '.dat'\n\
      \            else:\n              filename = period_name + '.dat'\n        \
      \    print ('{}: New period start at sample {} (ts={:.8f}), opening new output\
      \ file {}.'.format(datetime.now(), start_pos[0]+self.nitems_read(0), start_pos[1][0]+start_pos[1][1],\
      \ filename))\n            self.outfile = open(filename, 'wb')\n            self.outfile.write(new_file_items.tobytes())\n\
      \n        elif self.outfile:\n            self.outfile.write(input_items[0].tobytes())\n\
      \n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    debug: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    name_prefix: '''2200m_'''
    period_sec: '60'
  states:
    _io_cache: ('Rotating File Sink', 'blk', [('period_sec', '120'), ('debug', 'False'),
      ('name_prefix', 'None')], [('0', 'complex', 1)], [], 'Embedded Python Block
      example - a simple multiply const', ['debug', 'name_prefix', 'period_sec'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1552, 1316.0]
    rotation: 0
    state: true
- name: epy_block_2_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport socket\nimport struct\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ sample_rate=12000, stream_name='gnuradio', enabled=True):  # only default\
      \ arguments here\n        \"\"\"arguments to this function show up as parameters\
      \ in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n       \
      \     name='VBAN Audio Sink',   # will show up in GRC\n            in_sig=[np.short],\n\
      \            out_sig=None\n        )\n        # if an attribute with the same\
      \ name as a parameter is found,\n        # a callback is registered (properties\
      \ work, too).\n        self.sample_rate = sample_rate\n        self.stream_name\
      \ = stream_name\n        self.framecounter = 0\n        self.sr_const = [6000,\
      \ 12000, 24000, 48000, 96000, 192000, 384000, 8000, 16000, 32000, 64000, 128000,\
      \ 256000, 512000,11025, 22050, 44100, 88200, 176400, 352800, 705600]\n     \
      \   self.to_ip = '192.168.2.255'\n        self.to_port = 6980\n        self.enabled\
      \ = enabled\n\n        # create a socket\n        self.sock = socket.socket(socket.AF_INET,\
      \ socket.SOCK_DGRAM) # UDP\n        self.sock.setsockopt(socket.SOL_SOCKET,\
      \ socket.SO_BROADCAST, 1)\n\n    def make_packet(self, samples, fcount):\n \
      \       header  = b\"VBAN\" \n        header += bytes([self.sr_const.index(self.sample_rate)])\n\
      \        header += bytes([len(samples)-1])\n        header += bytes([0]) # mono\
      \ 1 channel\n        header += b'\\x01'  #VBAN_CODEC_PCM\n        header +=\
      \ bytes(self.stream_name + \"\\x00\" * (16 - len(self.stream_name)), 'utf-8')\n\
      \        header += struct.pack(\"<L\",fcount)\n        return header+samples.tobytes()\n\
      \n    def send_packet(self, packet):\n        self.sock.sendto(packet, (self.to_ip,\
      \ self.to_port))\n\n    def work(self, input_items, output_items):\n       \
      \ \"\"\"example: multiply with constant\"\"\"\n        if self.enabled:\n  \
      \        max_samples_per_packet = 255\n          frames = [input_items[0][i:i+max_samples_per_packet]\
      \ for i in range(0, len(input_items[0]), max_samples_per_packet)] \n       \
      \   for f in frames:\n              packet = self.make_packet(f, self.framecounter)\n\
      \              self.send_packet(packet)\n              self.framecounter +=\
      \ 1\n\n\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    enabled: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    sample_rate: '12000'
    stream_name: '''630m-3'''
  states:
    _io_cache: ('VBAN Audio Sink', 'blk', [('sample_rate', '12000'), ('stream_name',
      "'gnuradio'"), ('enabled', 'True')], [('0', 'short', 1)], [], 'Embedded Python
      Block example - a simple multiply const', ['enabled', 'sample_rate', 'stream_name'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1488, 908.0]
    rotation: 0
    state: true
- name: epy_block_2_1_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport socket\nimport struct\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ sample_rate=12000, stream_name='gnuradio', enabled=True):  # only default\
      \ arguments here\n        \"\"\"arguments to this function show up as parameters\
      \ in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n       \
      \     name='VBAN Audio Sink',   # will show up in GRC\n            in_sig=[np.short],\n\
      \            out_sig=None\n        )\n        # if an attribute with the same\
      \ name as a parameter is found,\n        # a callback is registered (properties\
      \ work, too).\n        self.sample_rate = sample_rate\n        self.stream_name\
      \ = stream_name\n        self.framecounter = 0\n        self.sr_const = [6000,\
      \ 12000, 24000, 48000, 96000, 192000, 384000, 8000, 16000, 32000, 64000, 128000,\
      \ 256000, 512000,11025, 22050, 44100, 88200, 176400, 352800, 705600]\n     \
      \   self.to_ip = '192.168.2.255'\n        self.to_port = 6980\n        self.enabled\
      \ = enabled\n\n        # create a socket\n        self.sock = socket.socket(socket.AF_INET,\
      \ socket.SOCK_DGRAM) # UDP\n        self.sock.setsockopt(socket.SOL_SOCKET,\
      \ socket.SO_BROADCAST, 1)\n\n    def make_packet(self, samples, fcount):\n \
      \       header  = b\"VBAN\" \n        header += bytes([self.sr_const.index(self.sample_rate)])\n\
      \        header += bytes([len(samples)-1])\n        header += bytes([0]) # mono\
      \ 1 channel\n        header += b'\\x01'  #VBAN_CODEC_PCM\n        header +=\
      \ bytes(self.stream_name + \"\\x00\" * (16 - len(self.stream_name)), 'utf-8')\n\
      \        header += struct.pack(\"<L\",fcount)\n        return header+samples.tobytes()\n\
      \n    def send_packet(self, packet):\n        self.sock.sendto(packet, (self.to_ip,\
      \ self.to_port))\n\n    def work(self, input_items, output_items):\n       \
      \ \"\"\"example: multiply with constant\"\"\"\n        if self.enabled:\n  \
      \        max_samples_per_packet = 255\n          frames = [input_items[0][i:i+max_samples_per_packet]\
      \ for i in range(0, len(input_items[0]), max_samples_per_packet)] \n       \
      \   for f in frames:\n              packet = self.make_packet(f, self.framecounter)\n\
      \              self.send_packet(packet)\n              self.framecounter +=\
      \ 1\n\n\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    enabled: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    sample_rate: '12000'
    stream_name: '''2200m'''
  states:
    _io_cache: ('VBAN Audio Sink', 'blk', [('sample_rate', '12000'), ('stream_name',
      "'gnuradio'"), ('enabled', 'True')], [('0', 'short', 1)], [], 'Embedded Python
      Block example - a simple multiply const', ['enabled', 'sample_rate', 'stream_name'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1664, 1628.0]
    rotation: 0
    state: true
- name: epy_block_2_1_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport socket\nimport struct\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ sample_rate=12000, stream_name='gnuradio', enabled=True):  # only default\
      \ arguments here\n        \"\"\"arguments to this function show up as parameters\
      \ in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n       \
      \     name='VBAN Audio Sink',   # will show up in GRC\n            in_sig=[np.short],\n\
      \            out_sig=None\n        )\n        # if an attribute with the same\
      \ name as a parameter is found,\n        # a callback is registered (properties\
      \ work, too).\n        self.sample_rate = sample_rate\n        self.stream_name\
      \ = stream_name\n        self.framecounter = 0\n        self.sr_const = [6000,\
      \ 12000, 24000, 48000, 96000, 192000, 384000, 8000, 16000, 32000, 64000, 128000,\
      \ 256000, 512000,11025, 22050, 44100, 88200, 176400, 352800, 705600]\n     \
      \   self.to_ip = '192.168.2.255'\n        self.to_port = 6980\n        self.enabled\
      \ = enabled\n\n        # create a socket\n        self.sock = socket.socket(socket.AF_INET,\
      \ socket.SOCK_DGRAM) # UDP\n        self.sock.setsockopt(socket.SOL_SOCKET,\
      \ socket.SO_BROADCAST, 1)\n\n    def make_packet(self, samples, fcount):\n \
      \       header  = b\"VBAN\" \n        header += bytes([self.sr_const.index(self.sample_rate)])\n\
      \        header += bytes([len(samples)-1])\n        header += bytes([0]) # mono\
      \ 1 channel\n        header += b'\\x01'  #VBAN_CODEC_PCM\n        header +=\
      \ bytes(self.stream_name + \"\\x00\" * (16 - len(self.stream_name)), 'utf-8')\n\
      \        header += struct.pack(\"<L\",fcount)\n        return header+samples.tobytes()\n\
      \n    def send_packet(self, packet):\n        self.sock.sendto(packet, (self.to_ip,\
      \ self.to_port))\n\n    def work(self, input_items, output_items):\n       \
      \ \"\"\"example: multiply with constant\"\"\"\n        if self.enabled:\n  \
      \        max_samples_per_packet = 255\n          frames = [input_items[0][i:i+max_samples_per_packet]\
      \ for i in range(0, len(input_items[0]), max_samples_per_packet)] \n       \
      \   for f in frames:\n              packet = self.make_packet(f, self.framecounter)\n\
      \              self.send_packet(packet)\n              self.framecounter +=\
      \ 1\n\n\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    enabled: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    sample_rate: '12000'
    stream_name: '''630m-2'''
  states:
    _io_cache: ('VBAN Audio Sink', 'blk', [('sample_rate', '12000'), ('stream_name',
      "'gnuradio'"), ('enabled', 'True')], [('0', 'short', 1)], [], 'Embedded Python
      Block example - a simple multiply const', ['enabled', 'sample_rate', 'stream_name'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1376, 564.0]
    rotation: 0
    state: true
- name: epy_block_2_1_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport socket\nimport struct\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ sample_rate=12000, stream_name='gnuradio', enabled=True):  # only default\
      \ arguments here\n        \"\"\"arguments to this function show up as parameters\
      \ in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n       \
      \     name='VBAN Audio Sink',   # will show up in GRC\n            in_sig=[np.short],\n\
      \            out_sig=None\n        )\n        # if an attribute with the same\
      \ name as a parameter is found,\n        # a callback is registered (properties\
      \ work, too).\n        self.sample_rate = sample_rate\n        self.stream_name\
      \ = stream_name\n        self.framecounter = 0\n        self.sr_const = [6000,\
      \ 12000, 24000, 48000, 96000, 192000, 384000, 8000, 16000, 32000, 64000, 128000,\
      \ 256000, 512000,11025, 22050, 44100, 88200, 176400, 352800, 705600]\n     \
      \   self.to_ip = '192.168.2.255'\n        self.to_port = 6980\n        self.enabled\
      \ = enabled\n\n        # create a socket\n        self.sock = socket.socket(socket.AF_INET,\
      \ socket.SOCK_DGRAM) # UDP\n        self.sock.setsockopt(socket.SOL_SOCKET,\
      \ socket.SO_BROADCAST, 1)\n\n    def make_packet(self, samples, fcount):\n \
      \       header  = b\"VBAN\" \n        header += bytes([self.sr_const.index(self.sample_rate)])\n\
      \        header += bytes([len(samples)-1])\n        header += bytes([0]) # mono\
      \ 1 channel\n        header += b'\\x01'  #VBAN_CODEC_PCM\n        header +=\
      \ bytes(self.stream_name + \"\\x00\" * (16 - len(self.stream_name)), 'utf-8')\n\
      \        header += struct.pack(\"<L\",fcount)\n        return header+samples.tobytes()\n\
      \n    def send_packet(self, packet):\n        self.sock.sendto(packet, (self.to_ip,\
      \ self.to_port))\n\n    def work(self, input_items, output_items):\n       \
      \ \"\"\"example: multiply with constant\"\"\"\n        if self.enabled:\n  \
      \        max_samples_per_packet = 255\n          frames = [input_items[0][i:i+max_samples_per_packet]\
      \ for i in range(0, len(input_items[0]), max_samples_per_packet)] \n       \
      \   for f in frames:\n              packet = self.make_packet(f, self.framecounter)\n\
      \              self.send_packet(packet)\n              self.framecounter +=\
      \ 1\n\n\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    enabled: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    sample_rate: '12000'
    stream_name: '''630m-1'''
  states:
    _io_cache: ('VBAN Audio Sink', 'blk', [('sample_rate', '12000'), ('stream_name',
      "'gnuradio'"), ('enabled', 'True')], [('0', 'short', 1)], [], 'Embedded Python
      Block example - a simple multiply const', ['enabled', 'sample_rate', 'stream_name'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1568, 20.0]
    rotation: 0
    state: true
- name: freq_xlating_fir_filter_xxx_1
  id: freq_xlating_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    center_freq: (fc-fc_2200)+f_if+bw/2
    comment: ''
    decim: '125'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    taps: firdes.low_pass(1.0,samp_rate,bw/2,100)
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 316.0]
    rotation: 0
    state: true
- name: freq_xlating_fir_filter_xxx_1_0
  id: freq_xlating_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    center_freq: (fc-fc_2200)+f_if+bw/2
    comment: ''
    decim: '125'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    taps: firdes.low_pass(1.0,samp_rate,bw/2,100)
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 140.0]
    rotation: 0
    state: true
- name: freq_xlating_fir_filter_xxx_1_1
  id: freq_xlating_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    center_freq: f_if+bw/2
    comment: ''
    decim: '125'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    taps: firdes.low_pass(1.0,samp_rate,bw/2,100)
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 1484.0]
    rotation: 0
    state: true
- name: freq_xlating_fir_filter_xxx_1_1_0
  id: freq_xlating_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    center_freq: f_if+bw/2
    comment: ''
    decim: '125'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    taps: firdes.low_pass(1.0,samp_rate,bw/2,100)
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [472, 1132.0]
    rotation: 0
    state: true
- name: gain
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: eng_float
    value: '5'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [640, 12.0]
    rotation: 0
    state: true
- name: phi
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: eng_float
    value: '30'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 12.0]
    rotation: 0
    state: true
- name: rational_resampler_xxx_0_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '4'
    fbw: '0'
    interp: '3'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: firdes.low_pass(1.0,16e3*3,bw/2,100)
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [824, 316.0]
    rotation: 0
    state: true
- name: rational_resampler_xxx_0_0_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '4'
    fbw: '0'
    interp: '3'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: firdes.low_pass(1.0,16e3*3,bw/2,100)
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [824, 124.0]
    rotation: 0
    state: true
- name: rational_resampler_xxx_0_0_1
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '4'
    fbw: '0'
    interp: '3'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: firdes.low_pass(1.0,16e3*3,bw/2,100)
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [624, 1484.0]
    rotation: 0
    state: true
- name: rational_resampler_xxx_0_0_1_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '4'
    fbw: '0'
    interp: '3'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: firdes.low_pass(1.0,16e3*3,bw/2,100)
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 1132.0]
    rotation: 0
    state: true
- name: sdrplay3_rspduo_0
  id: sdrplay3_rspduo
  parameters:
    AGC: 'False'
    AGC0: 'False'
    AGC1: 'False'
    affinity: ''
    agc_set_point: '-30'
    alias: ''
    am_notch_filter: 'False'
    antenna: Tuner 1 50 ohm
    antenna_both: Both Tuners
    bandwidth: '0'
    biasT: 'False'
    center_freq: fc_2200-f_if
    center_freq0: '0'
    center_freq1: '0'
    comment: ''
    dab_notch_filter: 'False'
    dc_offset_mode: 'False'
    debug_mode: 'True'
    freq_corr: '0'
    if_gRdB: '40'
    if_gRdB0: '47'
    if_gRdB1: '47'
    iq_balance_mode: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    output_type: fc32
    rf_gR: '0'
    rf_gR0: '0'
    rf_gR1: '0'
    rf_notch_filter: 'False'
    rsp_selector: ''
    rspduo_mode: Dual Tuner (diversity reception)
    sample_rate: samp_rate
    sample_rate_non_single_tuner: samp_rate
    sample_sequence_gaps_check: 'True'
    show_gain_changes: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 332.0]
    rotation: 0
    state: true
- name: xmlrpc_server_0
  id: xmlrpc_server
  parameters:
    addr: localhost
    alias: ''
    comment: ''
    port: '8080'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1520, 292.0]
    rotation: 0
    state: true

connections:
- [blocks_add_xx_0, '0', blocks_complex_to_real_0, '0']
- [blocks_complex_to_real_0, '0', blocks_multiply_const_xx_0, '0']
- [blocks_complex_to_real_0_0, '0', blocks_multiply_const_xx_1, '0']
- [blocks_complex_to_real_0_0_0, '0', blocks_multiply_const_xx_1_0, '0']
- [blocks_complex_to_real_0_1, '0', blocks_multiply_const_xx_0_0, '0']
- [blocks_float_to_short_0, '0', epy_block_2_1_1, '0']
- [blocks_float_to_short_0_0, '0', epy_block_2_1_2, '0']
- [blocks_float_to_short_0_1, '0', epy_block_2_1, '0']
- [blocks_float_to_short_0_1_0, '0', epy_block_2_1_0, '0']
- [blocks_freqshift_cc_0, '0', blocks_complex_to_real_0_0_0, '0']
- [blocks_freqshift_cc_0, '0', blocks_multiply_const_xx_1_1, '0']
- [blocks_freqshift_cc_0, '0', blocks_stream_mux_0, '0']
- [blocks_freqshift_cc_0_0, '0', blocks_complex_to_real_0_0, '0']
- [blocks_freqshift_cc_0_0, '0', blocks_phase_shift_0, '0']
- [blocks_freqshift_cc_0_0, '0', blocks_stream_mux_0, '1']
- [blocks_freqshift_cc_0_0_0, '0', blocks_complex_to_real_0_1, '0']
- [blocks_freqshift_cc_0_0_0, '0', blocks_stream_mux_0_0, '1']
- [blocks_freqshift_cc_0_0_0_0, '0', blocks_stream_mux_0_0, '0']
- [blocks_multiply_const_xx_0, '0', blocks_float_to_short_0_1, '0']
- [blocks_multiply_const_xx_0_0, '0', blocks_float_to_short_0_1_0, '0']
- [blocks_multiply_const_xx_1, '0', blocks_float_to_short_0, '0']
- [blocks_multiply_const_xx_1_0, '0', blocks_float_to_short_0_0, '0']
- [blocks_multiply_const_xx_1_1, '0', blocks_add_xx_0, '0']
- [blocks_multiply_const_xx_2, '0', blocks_add_xx_0, '1']
- [blocks_phase_shift_0, '0', blocks_multiply_const_xx_2, '0']
- [blocks_stream_mux_0, '0', blocks_tag_debug_0, '0']
- [blocks_stream_mux_0, '0', epy_block_1, '0']
- [blocks_stream_mux_0_0, '0', epy_block_1_0, '0']
- [epy_block_0, '0', freq_xlating_fir_filter_xxx_1_0, '0']
- [epy_block_0, '0', freq_xlating_fir_filter_xxx_1_1_0, '0']
- [freq_xlating_fir_filter_xxx_1, '0', rational_resampler_xxx_0_0, '0']
- [freq_xlating_fir_filter_xxx_1_0, '0', rational_resampler_xxx_0_0_0, '0']
- [freq_xlating_fir_filter_xxx_1_1, '0', rational_resampler_xxx_0_0_1, '0']
- [freq_xlating_fir_filter_xxx_1_1_0, '0', rational_resampler_xxx_0_0_1_0, '0']
- [rational_resampler_xxx_0_0, '0', blocks_freqshift_cc_0_0, '0']
- [rational_resampler_xxx_0_0_0, '0', blocks_freqshift_cc_0, '0']
- [rational_resampler_xxx_0_0_1, '0', blocks_freqshift_cc_0_0_0, '0']
- [rational_resampler_xxx_0_0_1_0, '0', blocks_freqshift_cc_0_0_0_0, '0']
- [sdrplay3_rspduo_0, '0', epy_block_0, '0']
- [sdrplay3_rspduo_0, '1', freq_xlating_fir_filter_xxx_1, '0']
- [sdrplay3_rspduo_0, '1', freq_xlating_fir_filter_xxx_1_1, '0']

metadata:
  file_format: 1
  grc_version: 3.10.7.0
